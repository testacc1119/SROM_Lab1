#include "InfInt.h"
/* #include "BigIntPolynomial.h" */
/* #include "BigIntNorm.h" */
#include <iostream>

void checkequal(const std::string& a, const std::string& b)
{
    if(a == b)
        std::cout << "OK!\n";
    else std::cout << "Not OK!\n";
}

inline void checkequal(const InfInt& a, const InfInt& b)
{
    if(a == b)
        std::cout << "OK!\n";
    else std::cout << "Not OK!\n";
}

int main(){
    InfInt a, b, c, n, my_a_plus_b, right_a_plus_b, my_a_minus_b, right_a_minus_b, my_a_mul_b, right_a_mul_b, my_a_div_b, right_a_div_b, my_a_mod_b, right_a_mod_b, my_gcd, right_gcd, my_lcm, right_lcm;

    a.read_from_hex_string("D4D2110984907B5625309D956521BAB4157B8B1ECE04043249A3D379AC112E5B9AF44E721E148D88A942744CF56A06B92D28A0DB950FE4CED2B41A0BD38BCE7D0BE1055CF5DE38F2A588C2C9A79A75011058C320A7B661C6CE1C36C7D870758307E5D2CF07D9B6E8D529779B6B2910DD17B6766A7E");

    checkequal("D4D2110984907B5625309D956521BAB4157B8B1ECE04043249A3D379AC112E5B9AF44E721E148D88A942744CF56A06B92D28A0DB950FE4CED2B41A0BD38BCE7D0BE1055CF5DE38F2A588C2C9A79A75011058C320A7B661C6CE1C36C7D870758307E5D2CF07D9B6E8D529779B6B2910DD17B6766A7E", a.to_hex_string());
    std::cout << a.to_hex_string() << "\n";

    b.read_from_hex_string("3A7EF2554E8940FA9B93B2A5E822CC7BB262F4A14159E4318CAE3ABF5AEB1022EC6D01DEFAB48B528868679D649B445A753684C13F6C3ADBAB059D635A2882090FC166EA9F0AAACD16A062149E4A0952F7FAAB14A0E9D3CB0BE9200DBD3B0342496421826919148E617AF1DB66978B1FCD2");

    checkequal("3A7EF2554E8940FA9B93B2A5E822CC7BB262F4A14159E4318CAE3ABF5AEB1022EC6D01DEFAB48B528868679D649B445A753684C13F6C3ADBAB059D635A2882090FC166EA9F0AAACD16A062149E4A0952F7FAAB14A0E9D3CB0BE9200DBD3B0342496421826919148E617AF1DB66978B1FCD2", b.to_hex_string());
    std::cout << b.to_hex_string() << "\n\n\n";

    right_a_plus_b.read_from_hex_string("d4d2110d2c7fa0ab0dc4ad3f1e5ce51297a852d9f4334e465f42169276f4da5149a550a0e4e4ab78548b29757bf0808f76dce682e87830e2c977c7c683e5a4b2ae6925edf1f4a79c96336f9b11a0964af4f9585027611310dcb973789702765edb9606f39e1bcf0f66bac08182d82e93812f286750");
    my_a_plus_b = a + b;

    checkequal(right_a_plus_b, my_a_plus_b);
    std::cout << my_a_plus_b.to_hex_string() << "\n";

    right_a_minus_b.read_from_hex_string("d4d21105dca156013c9c8debabe69055934ec363a7d4ba1e34059060e12d8265ec434c4357446f98fdf9bf246ee38ce2e3745b3441a798badbf06c512331f8476958e4cbf9c7ca48b4de15f83d9453b72bb82df1280bb07cbf7efa1719de74a734359eaa71979ec243982eb55379f326ae3dc46dac");
    my_a_minus_b = a - b;

    checkequal(right_a_minus_b, my_a_minus_b);

    right_a_mul_b.read_from_hex_string("30a120b609dcbe28b09ca92e12dd29d77ae6400dc22b026afb5fb945aaf62b57f4e48bd299261f02bbb35dd2495b5cd2713bf0e30192dae1b334659160c8552423f0ad7fb82870920df4e9b57980ead2ada9f3ef4b5d0718ab7f1053700395278998cb9ad48498d65150e3e837b0bb169d3bb6526801c019dcde0ffc3b125eac536efa74dc5f9de2046213488707f0abda9d067acd12edc504220eb2b2cafdfdb7b80592ad2e1b4cde60379e18327ca7ad4988b162ada84c6af4d297dcc0e0403c5d2f338f57ca249721ccd58d7a1ed6110844e9e2b744bae4079a1b7349a7cf2a088ef15635c");
    my_a_mul_b = a * b;

    checkequal(right_a_mul_b, my_a_mul_b);

    right_a_div_b.read_from_hex_string("3a362050");
    my_a_div_b = a/b;
    
    checkequal(right_a_div_b, my_a_div_b);

    c.read_from_hex_string("269D7722EA018F2AC35C5A3517AA06EAA1949059AE8240428BBFD0A8BE6E2EBF91223991F80D7413D6B2EB213E7122710EDEC617460FA0191F3901604619972018EBEF22D81AED9C56424014CADCC2CCDEE67D36A54BFC500230CA6693ABA057B374746622341ED6D52FE5A79E6860F54F197791B3FE");

    checkequal((a+b)*c, a*c + b*c);
    InfInt na = 0;
    for(int i = 0; i < 1000; ++i)
        na = na + a;
    checkequal(a*(InfInt)1000, na);

    ///////////////// lab 2 ///////////

    my_a_mod_b.read_from_hex_string("88f98f33332074fc3eb12334664f71ac8d7f0a1fa996161e005c7e9d474b04b5bf0a2d8a6ddeed9dc42c6bd01ecb8e7e8d73d164e80ec2e268f0951859276bd88a6f69a3466d341fe2435a950929a273f4703e3bcede0bc0e60235f908e492dfb0fb97facbf4112885962e438d6f128de");
    

    InfInt ii;
    ii.read_from_hex_string("234E");
    std::cout << ii.to_int() << "\n";

    InfInt example(8);
    std::cout << (example / 2).to_int() << "\n";

    std::cout << (a.to_power(b)).to_int() << "\n";

    std::cout << power_Barret_mod1(5, 3, 9).to_int() << "\n";

    std::cout << lcmBinary(26, 39).to_int() << "\n";

    std::cout << mult_mod(a, 18, c).to_int();

    ///////////////////////////////////////////////////////////////////////
/* 
    BigIntPol a("11111111000010010001001111010101000110001101010001001101001101100100101010101011101110111101011010111101101010101011001110110101011011111010111001000101001011100000111101011100010111010010010000000100000001101100011011010100001010010001011001001110001");

    BigIntPol b("00011001111100100010101011010010110111110010110010111010100011000110011011010001110000001101000110110100010011011000110000000100110000111101001101011100011110010111100111110100101011100100111001110010010000101100111110000011101010000100100100001101100");

    BigIntPol right_a_plus_b("11100110111110110011100100000111110001111111100011110111101110100010110001111010011110110000011100001001111001110011111110110001101011000111110100011001010101110111011010101000111100110110101001110110010001000000100101010111100000010101111101000011101");
    BigIntPol my_a_plus_b = a + b;

    BigIntPol right_a_mult_b("11010101100111010000111100110001001001011010001100110101100001110000101110000011100101101111000001111101001101110000100111100010011111010111111101101011100100001000001110011001000010100011100110000010100010100001001000010101111110000000110111100001110");
    BigIntPol my_a_mult_b = a * b;

    BigIntPol right_a_squared ("01100010000111011110111010110000111001111001111000101010010100011010001110000011010011101010111111110100001011001101001001001100101001011001100101011001110010100110110101011111010100011010010001001011110101001001000111000001110001000011010001100001001");
    BigIntPol my_a_squared = a.square();

    checkequal(a.to_string(), "11111111000010010001001111010101000110001101010001001101001101100100101010101011101110111101011010111101101010101011001110110101011011111010111001000101001011100000111101011100010111010010010000000100000001101100011011010100001010010001011001001110001");
    checkequal(my_a_plus_b.to_string(), right_a_plus_b.to_string());
    checkequal(my_a_mult_b.to_string(), right_a_mult_b.to_string()); // it works!!!!
    checkequal(my_a_squared.to_string(), right_a_squared.to_string());
     */
/* 
    BigIntNorm a("10100001111000011111000010001101010110100010001000001100111100110011110111010101000111101111110100001111001000011110011100101011110100001011110010101100111010000101010111110110001000001001000111101111010001011000001011111001010110000110100111110100111");

    BigIntNorm b("00010010100010010100100100001110110101000010000110110011010110010000000000101111001100000101011001010101010100101001010100110101010110010101011000101100101111000001100110100010000100011111100111101100101101101010100100100100001001001110011110000110000");

    BigIntNorm right_a_plus_b("10110011011010001011100110000011100011100000001110111111101010100011110111111010001011101010101101011010011100110111001000011110100010011110101010000000010101000100110001010100001100010110100000000011111100110010101111011101011111001000111001110010111");
    BigIntNorm my_a_plus_b = a + b;

    BigIntNorm right_a_mult_b("11110101000100100001101100011010011101111100111100110101101000011100100101111010011011111011100100011110011100010110000001101010111110111100000000100111110011101100000001011101011110101101111100011101010111001001011011110101111001100001111111000010111");
    BigIntNorm my_a_mult_b = a * b;

    BigIntNorm right_a_squared ("11010000111100001111100001000110101011010001000100000110011110011001111011101010100011110111111010000111100100001111001110010101111010000101111001010110011101000010101011111011000100000100100011110111101000101100000101111100101011000011010011111010011");
    BigIntNorm my_a_squared = a.square();

    checkequal(a.to_string(), "10100001111000011111000010001101010110100010001000001100111100110011110111010101000111101111110100001111001000011110011100101011110100001011110010101100111010000101010111110110001000001001000111101111010001011000001011111001010110000110100111110100111");
    checkequal(my_a_plus_b.to_string(), right_a_plus_b.to_string());
    checkequal(my_a_mult_b.to_string(), right_a_mult_b.to_string()); // it works!!!!
    checkequal(my_a_squared.to_string(), right_a_squared.to_string());
 */
    return 0;
}